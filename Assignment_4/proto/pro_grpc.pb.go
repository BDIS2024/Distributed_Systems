// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: proto/pro.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MutualExclusion_RequestAccess_FullMethodName = "/MutualExclusion/RequestAccess"
	MutualExclusion_Release_FullMethodName       = "/MutualExclusion/Release"
)

// MutualExclusionClient is the client API for MutualExclusion service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MutualExclusionClient interface {
	RequestAccess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Reply], error)
	Release(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReleaseRequest, Ack], error)
}

type mutualExclusionClient struct {
	cc grpc.ClientConnInterface
}

func NewMutualExclusionClient(cc grpc.ClientConnInterface) MutualExclusionClient {
	return &mutualExclusionClient{cc}
}

func (c *mutualExclusionClient) RequestAccess(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Request, Reply], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MutualExclusion_ServiceDesc.Streams[0], MutualExclusion_RequestAccess_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Request, Reply]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MutualExclusion_RequestAccessClient = grpc.BidiStreamingClient[Request, Reply]

func (c *mutualExclusionClient) Release(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ReleaseRequest, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MutualExclusion_ServiceDesc.Streams[1], MutualExclusion_Release_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ReleaseRequest, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MutualExclusion_ReleaseClient = grpc.BidiStreamingClient[ReleaseRequest, Ack]

// MutualExclusionServer is the server API for MutualExclusion service.
// All implementations must embed UnimplementedMutualExclusionServer
// for forward compatibility.
type MutualExclusionServer interface {
	RequestAccess(grpc.BidiStreamingServer[Request, Reply]) error
	Release(grpc.BidiStreamingServer[ReleaseRequest, Ack]) error
	mustEmbedUnimplementedMutualExclusionServer()
}

// UnimplementedMutualExclusionServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMutualExclusionServer struct{}

func (UnimplementedMutualExclusionServer) RequestAccess(grpc.BidiStreamingServer[Request, Reply]) error {
	return status.Errorf(codes.Unimplemented, "method RequestAccess not implemented")
}
func (UnimplementedMutualExclusionServer) Release(grpc.BidiStreamingServer[ReleaseRequest, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method Release not implemented")
}
func (UnimplementedMutualExclusionServer) mustEmbedUnimplementedMutualExclusionServer() {}
func (UnimplementedMutualExclusionServer) testEmbeddedByValue()                         {}

// UnsafeMutualExclusionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MutualExclusionServer will
// result in compilation errors.
type UnsafeMutualExclusionServer interface {
	mustEmbedUnimplementedMutualExclusionServer()
}

func RegisterMutualExclusionServer(s grpc.ServiceRegistrar, srv MutualExclusionServer) {
	// If the following call pancis, it indicates UnimplementedMutualExclusionServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MutualExclusion_ServiceDesc, srv)
}

func _MutualExclusion_RequestAccess_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MutualExclusionServer).RequestAccess(&grpc.GenericServerStream[Request, Reply]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MutualExclusion_RequestAccessServer = grpc.BidiStreamingServer[Request, Reply]

func _MutualExclusion_Release_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MutualExclusionServer).Release(&grpc.GenericServerStream[ReleaseRequest, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MutualExclusion_ReleaseServer = grpc.BidiStreamingServer[ReleaseRequest, Ack]

// MutualExclusion_ServiceDesc is the grpc.ServiceDesc for MutualExclusion service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MutualExclusion_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MutualExclusion",
	HandlerType: (*MutualExclusionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RequestAccess",
			Handler:       _MutualExclusion_RequestAccess_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Release",
			Handler:       _MutualExclusion_Release_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/pro.proto",
}
